/* TODO 
    -Complete asteroid generation
    -Create Game Space and spawn asteroids within it
         -Upper gravity and lower gravity bounds
    -Create player object systems
    -3D palyer view camera
    -3D scout view
        -Free motion in all directions
        -Can place markers
            -Assume Markers send a MOVE command
    -Develop BOIDS
        
    
        public Vector3[] topCorners = new Vector3[4] , bottomCorners = new Vector3[4];
        public Vector3[] top = new Vector3[9], bottom = new Vector3[9], left  = new Vector3[9], right = new Vector3[9];
        public Vector3[] topBottom = new Vector3[3], topLeft = new Vector3[3], topTop = new Vector3[3], topRight = new Vector3[3];
        public Vector3[] bottomBottom = new Vector3[3], bottomLeft = new Vector3[3], bottomTop = new Vector3[3], bottomRight = new Vector3[3];
        public Vector3[] leftLeft = new Vector3[3], leftRight = new Vector3[3];
        public Vector3[] rightLeft = new Vector3[3], rightRight = new Vector3[3];
        
        int indexCornerTop = 0;
                int indexTopLeft = 0;
                int indexTopRight = 0;
                int indexTopBottom = 0;
                int indexTopTop = 0;
                int indexTop = 0;
                int indexLeft = 0;
                int indexRight = 0;
                int indexBottomBottom = 0;
                int indexBottomLeft = 0;
                int indexBottomTop = 0;
                int indexBottomRight = 0;
                int indexCornerBottom = 0;
                for (var i = 0; i < 6; i++) {
                    switch (i) {
                        //top square
                        case 0:
                            for (int x = -2; x < 3; x++) {
                                for (var y = -2; y < 3; y++, index++) {
                                    if (x == -2 && y == -2 || x == 2 && y == 2 || x == -2 && y == 2 || x == 2 && y == -2) {
                                        topCorners[indexCornerTop] = new Vector3(x,y,2).normalized;
                                        verts[index] = topCorners[indexCornerTop];
                                        indexCornerTop++;
                                    }
        
                                    else if (y > -2 && y < 3 && x == -2) {
                                        topLeft[indexTopLeft] = new Vector3(x,y,2).normalized;
                                        verts[index] = topLeft[indexTopLeft];
                                        indexTopLeft++;
                                    }
        
                                    else if (y > -2 && y < 3 && x == 2) {
                                        topRight[indexTopRight] = new Vector3(x,y,2).normalized;
                                        verts[index] = topRight[indexTopRight];
                                        indexTopRight++;
                                    }
                                    else if (x > -2 && x < 3 && y == -2)
                                    {
                                        topBottom[indexTopBottom] = new Vector3(x,y,2).normalized;
                                        verts[index] = topBottom[indexTopBottom];
                                        indexTopBottom++;
                                    }
                                    else if (x > 2 && x < 3 && y == 2)
                                    {
                                        topTop[indexTopTop] = new Vector3(x,y,2).normalized;
                                        verts[index] = topTop[indexTopTop];
                                        indexTopTop++;
                                    }
                                    else
                                    {
                                        top[indexTop] = new Vector3(x,y,2).normalized;
                                        verts[index] = top[indexTop];
                                        indexTop++;
                                    }
                                }
                            } break;
                        //right square (when looking from above)
                        case 1:
                            for (var y = -2; y < 3; y++) {
                                for (var z = -2; z < 3; z++, index++) {
                                    if (y < 2 && y > -2 && z > -2 && z < 2)
                                    {
                                        right[indexRight] = new Vector3(2,y,z);
                                        verts[index] = right[indexRight];
                                        indexRight++;
                                    }
                                }
                            } break;
                        //left sqaure
                        case 5:
                            for (var y = 2; y > -3; y--) {
                                for (var z = -2; z < 3; z++, index++) {
                                    verts[index] = new Vector3(-2, y, z).normalized;
                                }
                            } break;
                        //front sqaure
                        case 3:
                            for (var x = -2; x < 3; x++) {
                                for (var z = -2; z < 3; z++, index++) {
                                    verts[index] = new Vector3(x, -2, z).normalized;
                                }
                            } break;
                        //back square
                        case 4:
                            for (var x = 2; x > -3; x--) {
                                for (var z = -2; z < 3; z++, index++) {
                                    verts[index] = new Vector3(x, 2, z).normalized;
                                }
                            } break;
                        //bottom square
                        case 2:
                            for (var x = 2; x > -3; x--) {
                                for (var y = -2; y < 3; y++, index++) {
                                    if (x == -2 && y == -2 || x == 2 && y == 2 || x == -2 && y == 2 || x == 2 && y == -2) {
                                        bottomCorners[indexCornerBottom] = new Vector3(x,y,2).normalized;
                                        verts[index] = topCorners[indexCornerBottom];
                                        indexCornerBottom++;
                                    }
        
                                    else if (y > -2 && y < 3 && x == -2) {
                                        topLeft[indexTopLeft] = new Vector3(x,y,2).normalized;
                                        verts[index] = topLeft[indexTopLeft];
                                        indexTopLeft++;
                                    }
        
                                    else if (y > -2 && y < 3 && x == 2) {
                                        topRight[indexTopRight] = new Vector3(x,y,2).normalized;
                                        verts[index] = topRight[indexTopRight];
                                        indexTopRight++;
                                    }
                                    else if (x > -2 && x < 3 && y == -2)
                                    {
                                        topBottom[indexTopBottom] = new Vector3(x,y,2).normalized;
                                        verts[index] = topBottom[indexTopBottom];
                                        indexTopBottom++;
                                    }
                                    else if (x > 2 && x < 3 && y == 2)
                                    {
                                        topTop[indexTopTop] = new Vector3(x,y,2).normalized;
                                        verts[index] = topTop[indexTopTop];
                                        indexTopTop++;
                                    }
                                    else
                                    {
                                        top[indexTop] = new Vector3(x,y,2).normalized;
                                        verts[index] = top[indexTop];
                                        indexTop++;
                                    }
                                    verts[index] = new Vector3(x, y, -2).normalized;
                                }
                            } break;
                    }
                }
*/


//VERSION 2
/*
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CubeGenerator : MonoBehaviour {
    public Material material;
    public static int subdivisions = 5;
    Vector3[] verts = new Vector3[subdivisions * subdivisions * 6];
    int[] triangleVerts = new int[(subdivisions-1)*(subdivisions-1) * 36];
    Vector3[] normals = new Vector3[subdivisions * subdivisions * 6];
    void Start() {
        
        MeshFilter meshFilter = gameObject.GetComponent<MeshFilter>();
        MeshRenderer meshRenderer = gameObject.GetComponent<MeshRenderer>();
        Mesh cubeSphere = new Mesh();

        int index = 0;
        for (var i = 0; i < 6; i++) {
            switch (i) {
                //top square
                case 0:
                    for (int x = -Mathf.FloorToInt(subdivisions/2f); x < Mathf.CeilToInt(subdivisions/2f); x++) {
                        for (var y = -Mathf.FloorToInt(subdivisions/2f); y < Mathf.CeilToInt(subdivisions/2f); y++, index++) {
                            Vector3 v = new Vector3(x, y, Mathf.FloorToInt(subdivisions/2f));
                            float xVal = v.x * v.x;
                            float yVal = v.y * v.y;
                            float zVal = v.z * v.z;
                            Vector3 s;
                            s.x = v.x * Mathf.Sqrt(6f - 3*yVal - 3*zVal + 2*(yVal * zVal));
                            s.y = v.y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = v.z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                            verts[index] = normals[index];
                            print(verts[index]);
                        }
                    } break;
                //right square (when looking from above)
                case 1:
                    for (var y = -Mathf.FloorToInt(subdivisions/2f); y < Mathf.CeilToInt(subdivisions/2f); y++) {
                        for (var z = -Mathf.FloorToInt(subdivisions/2f); z < Mathf.CeilToInt(subdivisions/2f); z++, index++) {
                            verts[index] = new Vector3(Mathf.FloorToInt(subdivisions/2f), y, z);
                            float xVal = verts[index].x * verts[index].x;
                            float yVal = verts[index].y * verts[index].y;
                            float zVal = verts[index].z * verts[index].z;
                            Vector3 s;
                            s.x = verts[index].x * Mathf.Sqrt(1f - yVal / 2f - zVal / 2f + yVal * zVal / 3f);
                            s.y = verts[index].y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = verts[index].z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                        }
                    } break;
                //left sqaure
                case 2:
                    for (var y = Mathf.FloorToInt(subdivisions/2f); y > -Mathf.CeilToInt(subdivisions/2f); y--) {
                        for (var z = -Mathf.FloorToInt(subdivisions/2f); z < Mathf.CeilToInt(subdivisions/2f); z++, index++) {
                            verts[index] = new Vector3(-Mathf.FloorToInt(subdivisions/2f), y, z);
                            float xVal = verts[index].x * verts[index].x;
                            float yVal = verts[index].y * verts[index].y;
                            float zVal = verts[index].z * verts[index].z;
                            Vector3 s;
                            s.x = verts[index].x * Mathf.Sqrt(1f - yVal / 2f - zVal / 2f + yVal * zVal / 3f);
                            s.y = verts[index].y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = verts[index].z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                        }
                    } break;
                //front sqaure
                case 3:
                    for (var x = -Mathf.FloorToInt(subdivisions/2f); x < Mathf.CeilToInt(subdivisions/2f); x++) {
                        for (var z = -Mathf.FloorToInt(subdivisions/2f); z < Mathf.CeilToInt(subdivisions/2f); z++, index++) {
                            verts[index] = new Vector3(x, -Mathf.FloorToInt(subdivisions/2f), z);
                            float xVal = verts[index].x * verts[index].x;
                            float yVal = verts[index].y * verts[index].y;
                            float zVal = verts[index].z * verts[index].z;
                            Vector3 s;
                            s.x = verts[index].x * Mathf.Sqrt(1f - yVal / 2f - zVal / 2f + yVal * zVal / 3f);
                            s.y = verts[index].y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = verts[index].z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                        }
                    } break;
                //back square
                case 4:
                    for (var x = Mathf.FloorToInt(subdivisions/2f); x > -Mathf.CeilToInt(subdivisions/2f); x--) {
                        for (var z = -Mathf.FloorToInt(subdivisions/2f); z < Mathf.CeilToInt(subdivisions/2f); z++, index++) {
                            verts[index] = new Vector3(x, Mathf.FloorToInt(subdivisions/2f), z);
                            float xVal = verts[index].x * verts[index].x;
                            float yVal = verts[index].y * verts[index].y;
                            float zVal = verts[index].z * verts[index].z;
                            Vector3 s;
                            s.x = verts[index].x * Mathf.Sqrt(1f - yVal / 2f - zVal / 2f + yVal * zVal / 3f);
                            s.y = verts[index].y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = verts[index].z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                        }
                    } break;
                //bottom square
                default:
                    for (var x = Mathf.FloorToInt(subdivisions/2f); x > -Mathf.CeilToInt(subdivisions/2f); x--) {
                        for (var y = -Mathf.FloorToInt(subdivisions/2f); y < Mathf.CeilToInt(subdivisions/2f); y++, index++) {
                            verts[index] = new Vector3(x, y, -Mathf.FloorToInt(subdivisions/2f));
                            float xVal = verts[index].x * verts[index].x;
                            float yVal = verts[index].y * verts[index].y;
                            float zVal = verts[index].z * verts[index].z;
                            Vector3 s;
                            s.x = verts[index].x * Mathf.Sqrt(1f - yVal / 2f - zVal / 2f + yVal * zVal / 3f);
                            s.y = verts[index].y * Mathf.Sqrt(1f - xVal / 2f - zVal / 2f + xVal * zVal / 3f);
                            s.z = verts[index].z * Mathf.Sqrt(1f - xVal / 2f - yVal / 2f + xVal * yVal / 3f);
                            normals[index] = s;
                        }
                    } break;
            }
        }

//        verts[11] *= 2;
//        verts[12] *= 3.2f;
//        verts[17] *= 1.5f;

        cubeSphere.vertices = verts;
        cubeSphere.normals = normals;
        index = 0;
        for (int face = 0; face < 6; face++) {
            for (int xIndex = 0; xIndex < subdivisions-1; xIndex++) {
                for (int yIndex = 0; yIndex < subdivisions-1; yIndex++) {
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + yIndex;
                    index++;
                    
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + (yIndex + subdivisions + 1);
                    index++;
                    
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + (yIndex + 1);
                    index++;
                    
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + yIndex;
                    index++;
                    
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + (yIndex + subdivisions);
                    index++;
                    
                    triangleVerts[index] = (face * subdivisions * subdivisions) + (xIndex * subdivisions) + (yIndex + subdivisions + 1);
                    index++;
                }
            } 
        }
        cubeSphere.triangles = triangleVerts;
        
        cubeSphere.RecalculateNormals();
        meshFilter.mesh = cubeSphere;
        meshRenderer.material = material;


        for (int i = 0; i < (subdivisions-1)*(subdivisions-1) * 36; i++)
        {
//            print(i);
            print(triangleVerts[i]);
        }

        for (int i = 0; i < subdivisions * subdivisions * 6; i++) {
            GameObject dube = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            dube.transform.localScale = Vector3.one * 0.2f;

            dube.name = i.ToString();
            dube.transform.position = verts[i].normalized;
        }
    }
}
*/
